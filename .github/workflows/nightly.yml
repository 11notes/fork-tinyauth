name: Nightly Release
on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old release
        run: gh release delete --cleanup-tag --yes nightly
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          tag_name: nightly

  binary-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: nightly

      - name: Install bun
        uses: oven-sh/setup-bun@v2

      - name: Install go
        uses: actions/setup-go@v5
        with:
          go-version: "^1.23.2"

      - name: Install frontend dependencies
        run: |
          cd frontend
          bun install

      - name: Install backend dependencies
        run: |
          go mod tidy

      - name: Set version
        run: |
          echo nightly > internal/assets/version

      - name: Build frontend
        run: |
          cd frontend
          bun run build

      - name: Build
        run: |
          cp -r frontend/dist internal/assets/dist
          CGO_ENABLED=0 go build -ldflags "-s -w" -o tinyauth-amd64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tinyauth-amd64
          path: tinyauth-amd64

  binary-build-arm:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: nightly

      - name: Install bun
        uses: oven-sh/setup-bun@v2

      - name: Install go
        uses: actions/setup-go@v5
        with:
          go-version: "^1.23.2"

      - name: Install frontend dependencies
        run: |
          cd frontend
          bun install

      - name: Install backend dependencies
        run: |
          go mod tidy

      - name: Set version
        run: |
          echo nightly > internal/assets/version

      - name: Build frontend
        run: |
          cd frontend
          bun run build

      - name: Build
        run: |
          cp -r frontend/dist internal/assets/dist
          CGO_ENABLED=0 go build -ldflags "-s -w" -o tinyauth-arm64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tinyauth-arm64
          path: tinyauth-arm64

  image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: nightly

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/tinyauth

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set version
        run: |
          echo nightly > internal/assets/version

      - name: Build and push
        uses: docker/build-push-action@v6
        id: build
        with:
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          tags: ghcr.io/${{ github.repository_owner }}/tinyauth
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-linux-amd64
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  image-build-arm:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: nightly

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/tinyauth

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set version
        run: |
          echo nightly > internal/assets/version

      - name: Build and push
        uses: docker/build-push-action@v6
        id: build
        with:
          platforms: linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
          tags: ghcr.io/${{ github.repository_owner }}/tinyauth
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-linux-arm64
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  image-merge:
    runs-on: ubuntu-latest
    needs:
      - image-build
      - image-build-arm
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/tinyauth
          tags: |
            type=raw,nightly

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/${{ github.repository_owner }}/tinyauth@sha256:%s ' *)

  update-release:
    runs-on: ubuntu-latest
    needs:
      - binary-build
      - binary-build-arm
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: tinyauth-*
          path: binaries
          merge-multiple: true

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: binaries/*
          tag_name: nightly
